// Generated by CoffeeScript 1.12.7

/*
 * SGA Shared Canvas v@VERSION
 *
 * **SGA Shared Canvas** is a shared canvas reader written in CoffeeScript.
 *
 * Date: @DATE
 *
 * (c) Copyright University of Maryland 2012-2013.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function() {
  var root,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  root = this;

  root.SGASharedCanvas = root.SGASharedCanvas || {};

  SGASharedCanvas.Utils = SGASharedCanvas.Utils || {};

  (function() {
    SGASharedCanvas.Utils.AudibleProperties = (function() {
      function AudibleProperties(variables) {
        this.variables = variables;
        _.extend(this, Backbone.Events);
      }

      AudibleProperties.prototype.set = function(prop, val, silent) {
        if (silent == null) {
          silent = false;
        }
        this.variables[prop] = val;
        if (!silent) {
          this.trigger('change', this.variables);
          this.trigger('all', this.variables);
          return this.trigger('change:' + prop, val, this.variables);
        }
      };

      AudibleProperties.prototype.get = function(prop) {
        return this.variables[prop];
      };

      return AudibleProperties;

    })();
    SGASharedCanvas.Utils.makeArray = function(item) {
      if (!$.isArray(item)) {
        return [item];
      } else {
        return item;
      }
    };
    return SGASharedCanvas.Utils.mouse = {
      mouseCaptureCallbacks: [],
      capture: function(cb) {
        var oldCB;
        oldCB = this.mouseCaptureCallbacks[0];
        this.mouseCaptureCallbacks.unshift(cb);
        if (this.mouseCaptureCallbacks.length === 1) {
          $(document).mousemove((function(_this) {
            return function(e) {
              e.preventDefault();
              return _this.mouseCaptureCallbacks[0].call(e, "mousemove");
            };
          })(this));
          $(document).mouseup((function(_this) {
            return function(e) {
              e.preventDefault();
              return _this.mouseCaptureCallbacks[0].call(e, "mouseup");
            };
          })(this));
        }
        return oldCB;
      },
      uncapture: function() {
        var oldCB;
        oldCB = this.mouseCaptureCallbacks.shift();
        if (this.mouseCaptureCallbacks.length === 0) {
          $(document).unbind("mousemove");
          $(document).unbind("mouseup");
        }
        return oldCB;
      }
    };
  })();

  SGASharedCanvas.Data = SGASharedCanvas.Data || {};

  (function() {
    var Annotation, Annotations, CanvasData, CanvasMeta, CanvasesData, CanvasesMeta, Content, Contents, Image, Images, Layer, Layers, Manifest, Manifests, ParsedAnno, ParsedAnnos, Range, Ranges, SearchAnnos, Sequence, Sequences, TextFile, TextFiles, Zone, Zones, importCanvas, importManifest, importSearchResults;
    TextFile = (function(superClass) {
      extend(TextFile, superClass);

      function TextFile() {
        return TextFile.__super__.constructor.apply(this, arguments);
      }

      TextFile.prototype.idAttribute = "target";

      TextFile.prototype.url = function(u) {
        var full_url;
        full_url = this.get("target");
        return full_url.replace(/^http:\/\/.*?(:\d+)?\//, "/");
      };

      TextFile.prototype.sync = function(method, model, options) {
        var mimetype, ref, t;
        if (window.mapping) {
          console.log('Offline mode: reading text file from mapping');
          t = this.get("target");
          if (t.endsWith('html')) {
            mimetype = 'text/html';
          } else {
            mimetype = 'text/xml';
          }
          this.set({
            data: new DOMParser().parseFromString(window.mapping[t], mimetype).documentElement.textContent
          });
          return this.trigger("sync");
        } else {
          if (method === 'read') {
            return Backbone.ajax({
              url: this.url(),
              method: 'GET',
              dataType: 'xml',
              success: (function(_this) {
                return function(data) {
                  _this.set({
                    data: data.documentElement.textContent
                  });
                  return _this.trigger("sync");
                };
              })(this),
              error: function(e) {
                throw new Error("Could not load text data.");
              }
            });
          } else {
            return (ref = Backbone.Model.prototype.sync).apply.apply(ref, [this].concat(slice.call(args)));
          }
        }
      };

      return TextFile;

    })(Backbone.Model);
    Sequence = (function(superClass) {
      extend(Sequence, superClass);

      function Sequence() {
        return Sequence.__super__.constructor.apply(this, arguments);
      }

      Sequence.prototype.idAttribute = "@id";

      return Sequence;

    })(Backbone.Model);
    Range = (function(superClass) {
      extend(Range, superClass);

      function Range() {
        return Range.__super__.constructor.apply(this, arguments);
      }

      Range.prototype.idAttribute = "@id";

      return Range;

    })(Backbone.Model);
    Layer = (function(superClass) {
      extend(Layer, superClass);

      function Layer() {
        return Layer.__super__.constructor.apply(this, arguments);
      }

      Layer.prototype.idAttribute = "@id";

      return Layer;

    })(Backbone.Model);
    Zone = (function(superClass) {
      extend(Zone, superClass);

      function Zone() {
        return Zone.__super__.constructor.apply(this, arguments);
      }

      Zone.prototype.idAttribute = "@id";

      return Zone;

    })(Backbone.Model);
    Annotation = (function(superClass) {
      extend(Annotation, superClass);

      function Annotation() {
        return Annotation.__super__.constructor.apply(this, arguments);
      }

      Annotation.prototype.idAttribute = "@id";

      return Annotation;

    })(Backbone.Model);
    Image = (function(superClass) {
      extend(Image, superClass);

      function Image() {
        return Image.__super__.constructor.apply(this, arguments);
      }

      Image.prototype.idAttribute = "@id";

      return Image;

    })(Backbone.Model);
    ParsedAnno = (function(superClass) {
      extend(ParsedAnno, superClass);

      function ParsedAnno() {
        return ParsedAnno.__super__.constructor.apply(this, arguments);
      }

      0;

      return ParsedAnno;

    })(Backbone.Model);
    TextFiles = (function(superClass) {
      extend(TextFiles, superClass);

      function TextFiles() {
        return TextFiles.__super__.constructor.apply(this, arguments);
      }

      TextFiles.prototype.model = TextFile;

      return TextFiles;

    })(Backbone.Collection);
    Sequences = (function(superClass) {
      extend(Sequences, superClass);

      function Sequences() {
        return Sequences.__super__.constructor.apply(this, arguments);
      }

      Sequences.prototype.model = Sequence;

      return Sequences;

    })(Backbone.Collection);
    Ranges = (function(superClass) {
      extend(Ranges, superClass);

      function Ranges() {
        return Ranges.__super__.constructor.apply(this, arguments);
      }

      Ranges.prototype.model = Range;

      return Ranges;

    })(Backbone.Collection);
    Layers = (function(superClass) {
      extend(Layers, superClass);

      function Layers() {
        return Layers.__super__.constructor.apply(this, arguments);
      }

      Layers.prototype.model = Layer;

      return Layers;

    })(Backbone.Collection);
    Zones = (function(superClass) {
      extend(Zones, superClass);

      function Zones() {
        return Zones.__super__.constructor.apply(this, arguments);
      }

      Zones.prototype.model = Zone;

      return Zones;

    })(Backbone.Collection);
    Annotations = (function(superClass) {
      extend(Annotations, superClass);

      function Annotations() {
        return Annotations.__super__.constructor.apply(this, arguments);
      }

      Annotations.prototype.model = Annotation;

      return Annotations;

    })(Backbone.Collection);
    Images = (function(superClass) {
      extend(Images, superClass);

      function Images() {
        return Images.__super__.constructor.apply(this, arguments);
      }

      Images.prototype.model = Image;

      return Images;

    })(Backbone.Collection);
    ParsedAnnos = (function(superClass) {
      extend(ParsedAnnos, superClass);

      function ParsedAnnos() {
        return ParsedAnnos.__super__.constructor.apply(this, arguments);
      }

      ParsedAnnos.prototype.model = ParsedAnno;

      return ParsedAnnos;

    })(Backbone.Collection);
    SearchAnnos = (function(superClass) {
      extend(SearchAnnos, superClass);

      function SearchAnnos() {
        return SearchAnnos.__super__.constructor.apply(this, arguments);
      }

      SearchAnnos.prototype.fetch = function(manifest, filter, query, service) {
        var url;
        if (service == null) {
          service = "http://localhost:5000/annotate?";
        }
        url = service + "f=" + filter + "&q=" + query;
        return Backbone.ajax({
          url: url,
          type: 'GET',
          contentType: 'application/json',
          processData: false,
          dataType: 'json',
          success: (function(_this) {
            return function(data) {
              return importSearchResults(data, manifest);
            };
          })(this),
          error: function(e) {
            throw new Error("Could not load search annotations");
          }
        });
      };

      return SearchAnnos;

    })(Annotations);
    Manifest = (function(superClass) {
      extend(Manifest, superClass);

      function Manifest() {
        return Manifest.__super__.constructor.apply(this, arguments);
      }

      Manifest.prototype.idAttribute = "url";

      Manifest.prototype.url = function(u) {
        u = u.replace(/^http:\/\/.*?(:\d+)?\//, "/");
        return "http://shelleygodwinarchive.org" + u;
      };

      Manifest.prototype.initialize = function() {
        this.sequences = new Sequences;
        this.ranges = new Ranges;
        this.canvasesMeta = new CanvasesMeta;
        this.canvasesData = new CanvasesData;
        this.textFiles = new TextFiles;
        this.resources = new Backbone.Collection;
        return this.searchResults = new SearchAnnos;
      };

      Manifest.prototype.url = function(u) {
        return this.get("url");
      };

      Manifest.prototype.sync = function(method, model, options) {
        var ref;
        if (window.manifest) {
          console.log('Offline mode: reading window.manifest');
          importManifest(window.manifest, this);
          return this.trigger('sync');
        } else {
          if (method === 'read') {
            return Backbone.ajax({
              url: this.url(),
              type: 'GET',
              contentType: 'application/json',
              processData: false,
              dataType: 'json',
              success: (function(_this) {
                return function(data) {
                  importManifest(data, _this);
                  return _this.trigger('sync');
                };
              })(this),
              error: function(e) {
                throw new Error("Could not load the manifest");
              }
            });
          } else {
            return (ref = Backbone.Model.prototype.sync).apply.apply(ref, [this].concat(slice.call(args)));
          }
        }
      };

      return Manifest;

    })(Backbone.Model);
    Manifests = (function(superClass) {
      extend(Manifests, superClass);

      function Manifests() {
        return Manifests.__super__.constructor.apply(this, arguments);
      }

      Manifests.prototype.model = Manifest;

      return Manifests;

    })(Backbone.Collection);
    CanvasMeta = (function(superClass) {
      extend(CanvasMeta, superClass);

      function CanvasMeta() {
        return CanvasMeta.__super__.constructor.apply(this, arguments);
      }

      CanvasMeta.prototype.idAttribute = "@id";

      return CanvasMeta;

    })(Backbone.Model);
    CanvasesMeta = (function(superClass) {
      extend(CanvasesMeta, superClass);

      function CanvasesMeta() {
        return CanvasesMeta.__super__.constructor.apply(this, arguments);
      }

      CanvasesMeta.prototype.model = CanvasMeta;

      return CanvasesMeta;

    })(Backbone.Collection);
    CanvasData = (function(superClass) {
      extend(CanvasData, superClass);

      function CanvasData() {
        return CanvasData.__super__.constructor.apply(this, arguments);
      }

      CanvasData.prototype.idAttribute = "@id";

      CanvasData.prototype.initialize = function() {
        this.contents = new Contents;
        this.images = new Images;
        this.zones = new Zones;
        this.SGAannos = new Annotations;
        return this.layerAnnos = new Layers;
      };

      CanvasData.prototype.fetch = function(manifest) {
        return importCanvas(this, manifest);
      };

      return CanvasData;

    })(Backbone.Model);
    CanvasesData = (function(superClass) {
      extend(CanvasesData, superClass);

      function CanvasesData() {
        return CanvasesData.__super__.constructor.apply(this, arguments);
      }

      CanvasesData.prototype.model = CanvasData;

      CanvasesData.prototype.reset = function(models, options) {
        var j, len, model, ref;
        if (models == null) {
          models = [];
        }
        if (options == null) {
          options = {};
        }
        ref = this.models;
        for (j = 0, len = ref.length; j < len; j++) {
          model = ref[j];
          this._removeReference(model);
          model.trigger('remove', model, this);
        }
        this._reset();
        this.add(this.models, _.extend({
          silent: true
        }, options));
        if (!options.silent) {
          this.trigger('reset', this, options);
        }
        return this;
      };

      return CanvasesData;

    })(Backbone.Collection);
    Content = (function(superClass) {
      extend(Content, superClass);

      function Content() {
        return Content.__super__.constructor.apply(this, arguments);
      }

      Content.prototype.idAttribute = "@id";

      Content.prototype.initialize = function() {
        return this.textItems = new ParsedAnnos;
      };

      return Content;

    })(Backbone.Model);
    Contents = (function(superClass) {
      extend(Contents, superClass);

      function Contents() {
        return Contents.__super__.constructor.apply(this, arguments);
      }

      Contents.prototype.model = Content;

      return Contents;

    })(Backbone.Collection);
    SGASharedCanvas.Data.Manifests = new Manifests;
    importManifest = function(jsonld, manifest) {
      var canvases, graph, id, id_graph, j, len, node, results1, types;
      graph = jsonld["@graph"];
      id_graph = {};
      for (j = 0, len = graph.length; j < len; j++) {
        node = graph[j];
        if (node["@id"] != null) {
          id_graph[node["@id"]] = node;
        }
      }
      manifest.set({
        raw_graph: id_graph
      });
      results1 = [];
      for (id in id_graph) {
        node = id_graph[id];
        if (node["@type"] != null) {
          types = node["@type"];
          if (!$.isArray(types)) {
            types = [types];
          }
          if (indexOf.call(types, "sc:Manifest") >= 0) {
            manifest.set(node);
          }
          if (indexOf.call(types, "sc:Sequence") >= 0) {
            canvases = [node["first"]];
            canvases = canvases.concat(node["rest"]);
            results1.push(manifest.sequences.add({
              "@id": node["@id"],
              "@type": node["@type"],
              "label": node["label"],
              "canvases": canvases
            }));
          } else if (indexOf.call(types, "sc:Range") >= 0) {
            results1.push(manifest.ranges.add(node));
          } else if (indexOf.call(types, "sc:Canvas") >= 0) {
            results1.push(manifest.canvasesMeta.add(node));
          } else if (indexOf.call(types, "sc:ContentAnnotation") >= 0) {
            results1.push(manifest.resources.add({
              "id": node["@id"],
              "on": id_graph[node["on"]]["full"],
              "resource": id_graph[node["resource"]]["full"]
            }));
          } else {
            results1.push(void 0);
          }
        } else {
          results1.push(void 0);
        }
      }
      return results1;
    };
    importCanvas = function(canvas, manifest) {
      var annotation, body, canvas_id, content, extractSpatialConstraint, extractTextBody, extractTextTarget, f, graph, id, image, items, j, len, loaded, loadedSources, modInfo, modend, modstart, node, process, ref, ref1, s, setMod, sgaTypes, source, sources, target, types, zone;
      extractSpatialConstraint = function(model, id) {
        var bits, constraint;
        if (id == null) {
          return;
        }
        constraint = graph[id];
        if (indexOf.call(SGASharedCanvas.Utils.makeArray(constraint["@type"]), 'oa:FragmentSelector') >= 0) {
          if (constraint["value"].substr(0, 5) === "xywh=") {
            model.set({
              shape: "Rectangle"
            });
            bits = constraint["value"].substr(5).split(",");
            return model.set({
              x: parseInt(bits[0], 10),
              y: parseInt(bits[1], 10),
              width: parseInt(bits[2], 10),
              height: parseInt(bits[3], 10)
            });
          }
        } else {
          if (constraint["beginOffset"] != null) {
            model.set({
              beginOffset: parseInt(constraint["beginOffset"])
            });
          }
          if (constraint["endOffset"] != null) {
            return model.set({
              endOffset: parseInt(constraint["endOffset"])
            });
          }
        }
      };
      extractTextTarget = function(model, id) {
        var styleItem, target;
        if (id == null) {
          return;
        }
        target = graph[id];
        if (indexOf.call(SGASharedCanvas.Utils.makeArray(target["@type"]), "oa:SpecificResource") >= 0) {
          model.set({
            target: target["full"]
          });
          if (target["oa:hasStyle"] != null) {
            styleItem = graph[target["oa:hasStyle"]["@id"]];
            if (indexOf.call(SGASharedCanvas.Utils.makeArray(styleItem["format"]), "text/css") >= 0) {
              model.set({
                css: styleItem["chars"]
              });
            }
          }
          if (target["sga:hasClass"] != null) {
            model.set({
              cssclass: target["sga:hasClass"]
            });
          }
          return extractSpatialConstraint(model, target["selector"]);
        } else {
          return model.set({
            target: id
          });
        }
      };
      extractTextBody = function(model, id) {
        var body;
        if (id == null) {
          return;
        }
        body = graph[id];
        model.set({
          source: body["full"]
        });
        return extractSpatialConstraint(model, body["selector"]);
      };
      canvas_id = canvas.get("id");
      graph = manifest.get("raw_graph");
      canvas.set(graph[canvas_id]);
      canvas.trigger('sync');
      if (canvas.contents.length <= 0) {
        for (id in graph) {
          node = graph[id];
          if (node["@type"] != null) {
            types = SGASharedCanvas.Utils.makeArray(node["@type"]);
            target = node["on"];
            body = node["resource"];
            if (indexOf.call(types, "sc:ContentAnnotation") >= 0 && graph[target]["full"] === canvas_id) {
              content = new Content;
              content.set(graph[id]);
              extractTextTarget(content, target);
              extractTextBody(content, body);
              canvas.contents.add(content);
            }
            if ((node["sc:motivatedBy"] != null) && node["on"] === canvas_id) {
              canvas.layerAnnos.add(node);
            } else if (indexOf.call(types, "sc:ZoneAnnotation") >= 0 && graph[target]["full"] === canvas_id) {
              zone = new Zone;
              canvas.zones.add(zone);
              extractSpatialConstraint(zone, target);
              zone.set(node);
            }
          }
        }
        for (id in graph) {
          node = graph[id];
          if (node["@type"] != null) {
            types = SGASharedCanvas.Utils.makeArray(node["@type"]);
            target = node["on"];
            body = node["resource"];
            if (indexOf.call(types, "oa:Annotation") >= 0 && (ref = node["@id"], indexOf.call(manifest.get("images"), ref) >= 0) && target === canvas_id) {
              image = new Image;
              image.set(graph[node["resource"]]);
              canvas.images.add(image);
            } else {
              sgaTypes = (function() {
                var j, len, results1;
                results1 = [];
                for (j = 0, len = types.length; j < len; j++) {
                  f = types[j];
                  if (f.substr(0, 4) === "sga:" && f.substr(f.length - 10) === "Annotation") {
                    results1.push(f.substr(4));
                  }
                }
                return results1;
              })();
              sources = [];
              if (sgaTypes.length > 0) {
                canvas.contents.forEach(function(c, i) {
                  var s;
                  s = c.get("source");
                  if ((s != null) && indexOf.call(sources, s) < 0) {
                    return sources.push(s);
                  }
                });
              }
            }
            if (graph[target] != null) {
              if (graph[target].hasOwnProperty("full")) {
                if (ref1 = graph[target]["full"], indexOf.call(sources, ref1) >= 0) {
                  annotation = new Annotation;
                  canvas.SGAannos.add(annotation);
                  extractTextTarget(annotation, target);
                  annotation.set({
                    "@id": node["@id"],
                    "@type": node["@type"]
                  });
                  if (node["sga:textIndentLevel"] != null) {
                    annotation.set({
                      "indent": node["sga:textIndentLevel"]
                    });
                  }
                  if (node["sga:textAlignment"] != null) {
                    annotation.set({
                      "align": node["sga:textAlignment"]
                    });
                  }
                  if (node["sga:spaceExt"] != null) {
                    annotation.set({
                      "ext": node["sga:spaceExt"]
                    });
                  }
                  if (manifest.searchResults.length > 0) {
                    manifest.searchResults.forEach(function(sa, i) {
                      var ref2;
                      if (ref2 = sa.get("target"), indexOf.call(sources, ref2) >= 0) {
                        return canvas.SGAannos.add(sa);
                      }
                    });
                  }
                }
              }
            }
          }
        }
        items = [];
        modstart = {};
        modend = {};
        modInfo = {};
        setMod = function(item) {
          var align, base, base1, end, indent, source, start;
          indent = item.get("indent");
          align = item.get("align");
          source = item.get("target");
          start = item.get("beginOffset");
          end = item.get("endOffset");
          id = item.get("@id");
          modInfo[id] = item;
          if (modstart[source] == null) {
            modstart[source] = {};
          }
          if ((base = modstart[source])[start] == null) {
            base[start] = [];
          }
          modstart[source][start].push(id);
          if (modend[source] == null) {
            modend[source] = {};
          }
          if ((base1 = modend[source])[end] == null) {
            base1[end] = [];
          }
          return modend[source][end].push(id);
        };
        canvas.SGAannos.forEach(function(anno, i) {
          return setMod(anno);
        });
        sources = (function() {
          var results1;
          results1 = [];
          for (s in modstart) {
            results1.push(s);
          }
          return results1;
        })();
        loadedSources = manifest.textFiles;
        for (j = 0, len = sources.length; j < len; j++) {
          source = sources[j];
          loaded = loadedSources.where({
            target: target
          }).length > 0;
          if (!loaded) {
            s = new TextFile;
            loadedSources.add(s);
            s.set({
              target: source
            });
            s.fetch();
            process = function() {
              var align, br_pushed, i1, idx, indent, j1, k1, last_pos, len1, len2, len3, makeEmptyLine, makeLinebreak, makeTextItems, mends, modIds, mstarts, needs_br, p, pos, positions, processNode, pushTextItem, ref2, ref3, text;
              text = s.get("data");
              modIds = [];
              br_pushed = false;
              pushTextItem = function(classes, css, contentAnno, start, end, options) {
                var titem;
                titem = new ParsedAnno;
                titem.set({
                  type: classes,
                  css: css.join(" "),
                  text: text.slice(start, end),
                  id: source + "-" + start + "-" + end,
                  target: contentAnno.get("@id"),
                  start: start,
                  end: end
                });
                if (options.indent != null) {
                  titem.set({
                    indent: options.indent
                  });
                }
                if (options.align != null) {
                  titem.set({
                    align: options.align
                  });
                }
                if (options.ext != null) {
                  titem.set({
                    ext: options.ext
                  });
                }
                return contentAnno.textItems.add(titem);
              };
              processNode = function(start, end) {
                var annocss, classes, css, cssClass, i1, j1, len1, len2, options, ref2, t;
                classes = [];
                css = [];
                options = {};
                for (i1 = 0, len1 = modIds.length; i1 < len1; i1++) {
                  id = modIds[i1];
                  ref2 = SGASharedCanvas.Utils.makeArray(modInfo[id].get("@type"));
                  for (j1 = 0, len2 = ref2.length; j1 < len2; j1++) {
                    t = ref2[j1];
                    classes.push(t.replace(":", ""));
                  }
                  cssClass = modInfo[id].get("cssclass");
                  if (cssClass != null) {
                    classes.push(cssClass);
                  }
                  annocss = modInfo[id].get("css");
                  if ($.isArray(annocss)) {
                    css.push(annocss.join(" "));
                  } else {
                    css.push(annocss);
                  }
                }
                if (classes.length === 0) {
                  classes.push("Text");
                }
                return makeTextItems(start, end, classes, css, options);
              };
              makeTextItems = function(start, end, classes, css, options) {
                canvas.contents.forEach(function(c, i) {
                  var beginOffset, en, endOffset, st;
                  beginOffset = c.get("beginOffset");
                  endOffset = c.get("endOffset");
                  if (start <= endOffset && end >= beginOffset) {
                    st = Math.min(Math.max(start, beginOffset), endOffset);
                    en = Math.max(Math.min(end, endOffset), beginOffset);
                    return pushTextItem(classes, css, c, st, en, options);
                  }
                });
                return false;
              };
              makeLinebreak = function(pos, options) {
                var classes;
                classes = ["LineBreak"];
                return makeTextItems(pos, pos, classes, [""], options);
              };
              makeEmptyLine = function(pos, options) {
                var classes;
                classes = ["EmptyLine"];
                return makeTextItems(pos, pos, classes, [""], options);
              };
              mstarts = modstart[source] || [];
              mends = modend[source] || [];
              last_pos = -1;
              positions = ((function() {
                var results1;
                results1 = [];
                for (p in mstarts) {
                  results1.push(parseInt(p, 10));
                }
                return results1;
              })()).concat((function() {
                var results1;
                results1 = [];
                for (p in mends) {
                  results1.push(parseInt(p, 10));
                }
                return results1;
              })()).sort(function(a, b) {
                return a - b;
              });
              for (i1 = 0, len1 = positions.length; i1 < len1; i1++) {
                pos = positions[i1];
                if (pos !== last_pos) {
                  processNode(last_pos, pos);
                  if (br_pushed && !text.substr(last_pos, pos - last_pos).match(/^\s*$/)) {
                    br_pushed = false;
                  }
                  needs_br = false;
                  ref2 = mstarts[pos] || [];
                  for (j1 = 0, len2 = ref2.length; j1 < len2; j1++) {
                    id = ref2[j1];
                    if (indexOf.call(modInfo[id].get("@type"), "sga:LineAnnotation") >= 0) {
                      needs_br = true;
                    }
                    modIds.push(id);
                  }
                  ref3 = mends[pos] || [];
                  for (k1 = 0, len3 = ref3.length; k1 < len3; k1++) {
                    id = ref3[k1];
                    if (indexOf.call(modInfo[id].get("@type"), "sga:LineAnnotation") >= 0) {
                      needs_br = true;
                    }
                    idx = modIds.indexOf(id);
                    if (idx > -1) {
                      modIds.splice(idx, 1);
                    }
                    if (needs_br && !br_pushed) {
                      indent = null;
                      align = null;
                      if (modInfo[id].get("indent") != null) {
                        indent = modInfo[id].get("indent");
                      }
                      if (modInfo[id].get("align") != null) {
                        align = modInfo[id].get("align");
                      }
                      makeLinebreak(pos, {
                        "indent": indent,
                        "align": align
                      });
                      br_pushed = true;
                    }
                  }
                  last_pos = pos;
                } else if (indexOf.call(modInfo[id].get("@type"), "sga:SpaceAnnotation") >= 0) {
                  makeEmptyLine(pos, {
                    "ext": modInfo[id].get("ext")
                  });
                }
              }
              return processNode(last_pos, text.length);
            };
            s.once('sync', process);
            if (window.mapping) {
              process();
            }
          }
        }
        return canvas.trigger('fullsync');
      }
    };
    return importSearchResults = function(graph, manifest) {
      return manifest.ready(function() {
        var id, id_graph, j, len, node, ref, resource, selector, target, types;
        id_graph = {};
        ref = graph["@graph"];
        for (j = 0, len = ref.length; j < len; j++) {
          node = ref[j];
          if (node["@id"] != null) {
            id_graph[node["@id"]] = node;
          }
        }
        for (id in id_graph) {
          node = id_graph[id];
          if (node["@type"] != null) {
            types = SGASharedCanvas.Utils.makeArray(node["@type"]);
            if (indexOf.call(types, "sga:SearchAnnotation") >= 0) {
              target = node["on"];
              selector = id_graph[target]["selector"];
              resource = manifest.resources.find(function(res) {
                return res.get("resource") === id_graph[target]["full"];
              });
              if (resource != null) {
                manifest.searchResults.add({
                  "@id": node["@id"],
                  "@type": node["@type"],
                  "target": id_graph[target]["full"],
                  "beginOffset": id_graph[selector]["beginOffset"],
                  "endOffset": id_graph[selector]["endOffset"],
                  "canvas_id": resource.get("on")
                });
              }
            }
          }
        }
        return manifest.searchResults.trigger('sync');
      });
    };
  })();

  SGASharedCanvas.Component = SGASharedCanvas.Component || {};

  (function() {
    var ComponentView;
    ComponentView = (function(superClass) {
      extend(ComponentView, superClass);

      function ComponentView() {
        return ComponentView.__super__.constructor.apply(this, arguments);
      }

      ComponentView.prototype.initialize = function(options) {
        var k, ref, results1, v;
        this.variables = new SGASharedCanvas.Utils.AudibleProperties({});
        if ((options.vars != null) && typeof options.vars === 'object') {
          ref = options.vars;
          results1 = [];
          for (k in ref) {
            v = ref[k];
            results1.push(this.variables.set(k, v));
          }
          return results1;
        }
      };

      return ComponentView;

    })(Backbone.View);
    SGASharedCanvas.Component.Pager = (function(superClass) {
      extend(Pager, superClass);

      function Pager() {
        return Pager.__super__.constructor.apply(this, arguments);
      }

      Pager.prototype.events = {
        'click #next-page': 'nextPage',
        'click #prev-page': 'prevPage',
        'click #first-page': 'firstPage',
        'click #last-page': 'lastPage'
      };

      Pager.prototype.checkAndProceed = function(newPage) {
        var hash;
        hash = Backbone.history.location.hash;
        if (hash.match("#\/?p") != null) {
          hash = hash.replace(/#\/?p\d+/, '#/p' + newPage);
        } else {
          hash = "#/p" + newPage;
        }
        return hash;
      };

      Pager.prototype.nextPage = function(e) {
        var hash;
        e.preventDefault();
        hash = this.checkAndProceed(this.variables.get("seqPage") + 1);
        return Backbone.history.navigate(hash, {
          trigger: true
        });
      };

      Pager.prototype.prevPage = function(e) {
        var hash;
        e.preventDefault();
        hash = this.checkAndProceed(this.variables.get("seqPage") - 1);
        return Backbone.history.navigate(hash, {
          trigger: true
        });
      };

      Pager.prototype.firstPage = function(e) {
        var hash;
        e.preventDefault();
        hash = this.checkAndProceed(this.variables.get("seqMin"));
        return Backbone.history.navigate(hash, {
          trigger: true
        });
      };

      Pager.prototype.lastPage = function(e) {
        var hash;
        e.preventDefault();
        hash = this.checkAndProceed(this.variables.get("seqMax"));
        return Backbone.history.navigate(hash, {
          trigger: true
        });
      };

      Pager.prototype.initialize = function(options) {
        var firstEl, lastEl, nextEl, prevEl;
        Pager.__super__.initialize.apply(this, arguments);
        firstEl = this.$el.find('#first-page');
        prevEl = this.$el.find('#prev-page');
        nextEl = this.$el.find('#next-page');
        lastEl = this.$el.find('#last-page');
        return this.listenTo(this.variables, 'change:seqPage', function(n) {
          if (n > this.variables.get("seqMin")) {
            firstEl.removeClass("disabled");
            prevEl.removeClass("disabled");
          } else {
            firstEl.addClass("disabled");
            prevEl.addClass("disabled");
          }
          if (n < this.variables.get("seqMax")) {
            nextEl.removeClass("disabled");
            return lastEl.removeClass("disabled");
          } else {
            nextEl.addClass("disabled");
            return lastEl.addClass("disabled");
          }
        });
      };

      return Pager;

    })(ComponentView);
    SGASharedCanvas.Component.Slider = (function(superClass) {
      extend(Slider, superClass);

      function Slider() {
        return Slider.__super__.constructor.apply(this, arguments);
      }

      Slider.prototype.initialize = function(options) {
        Slider.__super__.initialize.apply(this, arguments);
        this.data = options.data;
        this.listenTo(this.variables, 'change:seqMax', function(n) {
          var e, getLabel, pages;
          getLabel = (function(_this) {
            return function(n) {
              var canvas, canvasId, canvases, sequence;
              sequence = _this.data.sequences.first();
              canvases = sequence.get("canvases");
              canvasId = canvases[n];
              canvas = _this.data.canvasesMeta.get(canvasId);
              return canvas.get("sga:folioLabel");
            };
          })(this);
          try {
            if (this.$el.data("ui-slider")) {
              return this.$el.slider({
                max: n
              });
            } else {
              pages = n;
              this.$el.slider({
                orientation: "vertical",
                range: "min",
                min: this.variables.get('seqMin'),
                max: pages,
                value: pages,
                slide: function(event, ui) {
                  return $(ui.handle).text(getLabel(pages - ui.value));
                },
                stop: function(event, ui) {
                  var hash, newPage;
                  newPage = (pages - ui.value) + 1;
                  hash = Backbone.history.location.hash;
                  if (hash.match("#\/?p") != null) {
                    hash = hash.replace(/#\/?p\d+/, '#/p' + newPage);
                  } else {
                    hash = "#/p" + newPage;
                  }
                  return Backbone.history.navigate(hash);
                }
              });
              this.listenTo(this.variables, "change:seqPage", function(n) {
                return this.$el.find(".ui-slider-handle").text(getLabel(n - 1));
              });
              return Backbone.on('viewer:resize', (function(_this) {
                return function(options) {
                  return _this.$el.height(options.container.height() + 'px');
                };
              })(this));
            }
          } catch (error) {
            e = error;
            return console.log(e, "Unable to update maximum value of slider");
          }
        });
        this.listenTo(this.variables, 'change:seqMin', function(n) {
          var e;
          try {
            if (this.$el.data("ui-slider")) {
              return this.$el.slider({
                min: n
              });
            }
          } catch (error) {
            e = error;
            return console.log(e, "Unable to update minimum value of slider");
          }
        });
        this.listenTo(this.variables, 'change:seqPage', function(n) {
          var e;
          try {
            if (this.$el.data("ui-slider")) {
              this.$el.slider({
                value: this.variables.get('seqMax') - (n - 1)
              });
            }
            if (options.getLabel != null) {
              return this.$el.find(".ui-slider-handle").text(getLabel(n));
            }
          } catch (error) {
            e = error;
            return console.log(e, "Unable to update value of slider");
          }
        });
        return Backbone.on("viewer:searchResults", (function(_this) {
          return function(results) {
            var adjustment, e, j, len, pages, r, res_height, results1, valPercent;
            _this.$el.find('.res').remove();
            pages = _this.variables.get("seqMax");
            try {
              results1 = [];
              for (j = 0, len = results.length; j < len; j++) {
                r = results[j];
                r = parseInt(r);
                res_height = _this.$el.height() / pages;
                valPercent = 100 - ((r * 100) / pages);
                adjustment = 50 / pages;
                results1.push(_this.$el.append("<div style='bottom:" + (valPercent + adjustment) + "%; height:" + res_height + "px' class='res ui-slider-range ui-widget-header ui-corner-all'> </div>"));
              }
              return results1;
            } catch (error) {
              e = error;
              return console.log("Unable to update slider with search results");
            }
          };
        })(this));
      };

      return Slider;

    })(ComponentView);
    SGASharedCanvas.Component.ImageControls = (function(superClass) {
      extend(ImageControls, superClass);

      function ImageControls() {
        return ImageControls.__super__.constructor.apply(this, arguments);
      }

      ImageControls.prototype.events = {
        'click #zoom-reset': 'zoomReset',
        'click #zoom-in': 'zoomIn',
        'click #zoom-out': 'zoomOut',
        'click #rotate-r': 'rotateRight',
        'click #rotate-l': 'rotateLeft'
      };

      ImageControls.prototype.zoomReset = function(e) {
        e.preventDefault();
        return this.variables.set("zoom", 0);
      };

      ImageControls.prototype.zoomIn = function(e) {
        e.preventDefault();
        return this.variables.set("zoom", 1);
      };

      ImageControls.prototype.zoomOut = function(e) {
        e.preventDefault();
        return this.variables.set("zoom", -1);
      };

      ImageControls.prototype.rotateRight = function(e) {
        return this.variables.set("rotation", 1);
      };

      ImageControls.prototype.rotateLeft = function(e) {
        return this.variables.set("rotation", -1);
      };

      return ImageControls;

    })(ComponentView);
    SGASharedCanvas.Component.ReadingModeControls = (function(superClass) {
      extend(ReadingModeControls, superClass);

      function ReadingModeControls() {
        return ReadingModeControls.__super__.constructor.apply(this, arguments);
      }

      ReadingModeControls.prototype.initialize = function(options) {
        ReadingModeControls.__super__.initialize.apply(this, arguments);
        return this.listenTo(SGASharedCanvas.Data.Manifests, 'page', function(n, options) {
          if (options != null) {
            if (options.mode != null) {
              switch (options.mode) {
                case "img":
                  return this.$el.find("#img-only").button("toggle");
                default:
                  return this.$el.find("#mode-" + options.mode).button("toggle");
              }
            } else {
              return this.$el.find("#mode-std").button("toggle");
            }
          }
        });
      };

      ReadingModeControls.prototype.events = {
        'click #img-only': 'setImgMode',
        'click #mode-std': 'setStdMode',
        'click #mode-rdg': 'setRdgMode',
        'click #mode-xml': 'setXmlMode'
      };

      ReadingModeControls.prototype.checkAndProceed = function(m) {
        var hash;
        hash = Backbone.history.location.hash;
        hash = hash.replace(/\/search\/f:[^\|]+\|q:[^\/]+/, "");
        if (hash.match("\/mode\/") != null) {
          hash = hash.replace(/mode\/\w{3}/, 'mode/' + m);
        } else {
          hash = hash.replace(/(#\/?p\d+)/, '$1/mode/' + m);
        }
        return hash;
      };

      ReadingModeControls.prototype.setImgMode = function(e) {
        var hash;
        e.preventDefault();
        hash = this.checkAndProceed("img");
        return Backbone.history.navigate(hash, {
          trigger: true
        });
      };

      ReadingModeControls.prototype.setStdMode = function(e) {
        var hash;
        e.preventDefault();
        hash = this.checkAndProceed("std");
        return Backbone.history.navigate(hash, {
          trigger: true
        });
      };

      ReadingModeControls.prototype.setRdgMode = function(e) {
        var hash;
        e.preventDefault();
        hash = this.checkAndProceed("rdg");
        return Backbone.history.navigate(hash, {
          trigger: true
        });
      };

      ReadingModeControls.prototype.setXmlMode = function(e) {
        var hash;
        e.preventDefault();
        hash = this.checkAndProceed("xml");
        return Backbone.history.navigate(hash, {
          trigger: true
        });
      };

      return ReadingModeControls;

    })(ComponentView);
    SGASharedCanvas.Component.LimitViewControls = (function(superClass) {
      extend(LimitViewControls, superClass);

      function LimitViewControls() {
        return LimitViewControls.__super__.constructor.apply(this, arguments);
      }

      LimitViewControls.prototype.initialize = function(options) {
        LimitViewControls.__super__.initialize.apply(this, arguments);
        this.listenTo(SGASharedCanvas.Data.Manifests, 'page', (function(_this) {
          return function(n, options) {
            if (options != null) {
              if (options.mode != null) {
                if (options.mode !== "std") {
                  _this.disable();
                  return _this.reset();
                } else {
                  return _this.enable();
                }
              }
            }
          };
        })(this));
        this.limitValues = [].concat(options.include);
        this.colors = options.colors;
        if (this.colors == null) {
          this.colors = {};
        }
        if (this.colors.visible == null) {
          this.colors.visible = '#a54647';
        }
        if (this.colors.limited == null) {
          this.colors.limited = '#D9D9D9';
        }
        this.defLimiter = options.defLimiter;
        this.$el.find('input').each((function(_this) {
          return function(i, e) {
            var j, len, results1, v, vals;
            if ($(e).attr("name") === "work-view") {
              _this.colors.visible = '#000';
            }
            vals = $(e).val();
            vals = vals.split(/\s+/g);
            results1 = [];
            for (j = 0, len = vals.length; j < len; j++) {
              v = vals[j];
              if (v !== 'default') {
                results1.push(_this.limitValues.push(v));
              } else {
                results1.push(void 0);
              }
            }
            return results1;
          };
        })(this));
        this.$el.change((function(_this) {
          return function(e) {
            var c, checked, css, hide, i1, j, len, len1, limit, ref;
            checked = $(e.target).val();
            checked = checked.split(/\s+/g);
            $('#LimitViewControls_classes').remove();
            if (indexOf.call(checked, 'default') < 0) {
              css = "";
              hide = "";
              for (j = 0, len = checked.length; j < len; j++) {
                c = checked[j];
                css += " .sharedcanvas[data-types] ." + c + " { color: " + _this.colors.visible + " }";
                if (checked.length === 1 && c === _this.defLimiter) {
                  ref = _this.limitValues;
                  for (i1 = 0, len1 = ref.length; i1 < len1; i1++) {
                    limit = ref[i1];
                    css += " .sharedcanvas[data-types] ." + limit + " { color: " + _this.colors.limited + " }";
                    css += " .sharedcanvas[data-types] *:not(." + limit + ") { color: " + _this.colors.visible + " }";
                  }
                } else {
                  hide += ":not(." + c + ")";
                }
              }
              css += " .sharedcanvas[data-types] *" + hide + " { color: " + _this.colors.limited + " }";
              return $("<style type='text/css' id='LimitViewControls_classes'>" + css + "</style>").appendTo("head");
            }
          };
        })(this));
        return this.$el.find('input:checked').change();
      };

      LimitViewControls.prototype.reset = function() {
        $('#LimitViewControls_classes').remove();
        return this.$el.find('input').each((function(_this) {
          return function(i, e) {
            var j, len, results1, v, vals;
            vals = $(e).val();
            vals = vals.split(/\s+/g);
            results1 = [];
            for (j = 0, len = vals.length; j < len; j++) {
              v = vals[j];
              if (v === 'default') {
                results1.push($(e).prop('checked', true));
              } else {
                results1.push($(e).prop('checked', false));
              }
            }
            return results1;
          };
        })(this));
      };

      LimitViewControls.prototype.disable = function() {
        return this.$el.find('input').each((function(_this) {
          return function(i, e) {
            return $(e).attr("disabled", true);
          };
        })(this));
      };

      LimitViewControls.prototype.enable = function() {
        return this.$el.find('input').each((function(_this) {
          return function(i, e) {
            return $(e).removeAttr("disabled");
          };
        })(this));
      };

      return LimitViewControls;

    })(ComponentView);
    SGASharedCanvas.Component.SearchBox = (function(superClass) {
      extend(SearchBox, superClass);

      function SearchBox() {
        return SearchBox.__super__.constructor.apply(this, arguments);
      }

      SearchBox.prototype.events = {
        'submit': 'search',
        'click #searchbtn': 'submitForm'
      };

      SearchBox.prototype.search = function(e) {
        var f, fields, fields_html, i, j, len, loc, q, val;
        e.preventDefault();
        loc = Backbone.history.fragment;
        fields_html = $(e.target).find('#limit-search input:checked');
        fields = "";
        if (fields_html.length === 0) {
          fields = "text";
        } else {
          for (i = j = 0, len = fields_html.length; j < len; i = ++j) {
            f = fields_html[i];
            fields += $(f).val();
            if (i + 1 !== fields_html.length) {
              fields += ',';
            }
          }
        }
        val = this.$el.find("input#searchbox").val();
        if (!val.match('^\s*$')) {
          q = "f:" + fields + "|q:" + val;
          loc = loc.replace(/\/search\/f:[^\|]+\|q:[^\/]+/, "");
          loc = loc.replace(/\/mode\/\w{3}/, "");
          Backbone.history.navigate(loc + '/search/' + q, {
            trigger: true
          });
        }
        return false;
      };

      SearchBox.prototype.submitForm = function(e) {
        e.preventDefault();
        return this.$el.submit();
      };

      return SearchBox;

    })(ComponentView);
    return SGASharedCanvas.Component.OpenSeadragon = (function(superClass) {
      extend(OpenSeadragon, superClass);

      function OpenSeadragon() {
        return OpenSeadragon.__super__.constructor.apply(this, arguments);
      }

      OpenSeadragon.prototype.initialize = function() {
        return OpenSeadragon.__super__.initialize.apply(this, arguments);
      };

      return OpenSeadragon;

    })(ComponentView);
  })();

  SGASharedCanvas.View = SGASharedCanvas.View || {};

  (function() {
    var AreaView, CanvasMetaView, CanvasView, CanvasesView, ContentView, ContentsView, ImageDjatokaView, ImageView, ImagesView, ManifestView, ManifestsView, TextAnnoView, TextAnnotationsView, ViewerAreaView;
    SGASharedCanvas.Application = (function(superClass) {
      extend(Application, superClass);

      function Application() {
        return Application.__super__.constructor.apply(this, arguments);
      }

      Application.prototype.el = '#main-content';

      Application.prototype.initialize = function(config) {
        var manifest, manifestUrl, manifests, searchService;
        if (config == null) {
          config = {};
        }
        manifestUrl = config.manifest;
        searchService = config.searchService;
        manifests = SGASharedCanvas.Data.Manifests;
        new ManifestsView({
          collection: manifests,
          searchService: searchService
        });
        manifest = manifests.add({
          url: manifestUrl
        });
        if (manifestUrl === "#local") {
          manifest.parse(window.manifest);
          manifest.sync();
        } else {
          manifest.fetch();
        }
        return Backbone.history.start();
      };

      return Application;

    })(Backbone.View);
    ManifestsView = (function(superClass) {
      extend(ManifestsView, superClass);

      function ManifestsView() {
        return ManifestsView.__super__.constructor.apply(this, arguments);
      }

      ManifestsView.prototype.initialize = function(options) {
        this.searchService = options.searchService;
        return this.listenTo(this.collection, 'add', this.addOne);
      };

      ManifestsView.prototype.addOne = function(model) {
        return new ManifestView({
          model: model,
          searchService: this.searchService
        });
      };

      ManifestsView.prototype.render = function() {
        return this;
      };

      return ManifestsView;

    })(Backbone.View);
    ManifestView = (function(superClass) {
      extend(ManifestView, superClass);

      function ManifestView() {
        this.renderMeta = bind(this.renderMeta, this);
        return ManifestView.__super__.constructor.apply(this, arguments);
      }

      ManifestView.prototype.el = '#SGASharedCanvasViewer';

      ManifestView.prototype.initialize = function(options) {
        var fetchCanvas;
        fetchCanvas = (function(_this) {
          return function(n) {
            var canvas, canvasId, canvases, sequence;
            sequence = _this.model.sequences.first();
            canvases = sequence.get("canvases");
            canvases = _.filter(canvases, function(c) {
              return c !== void 0;
            });
            _this.variables.set("seqMax", canvases.length);
            _this.variables.set("seqPage", parseInt(n));
            if (n > canvases.length) {
              n = canvases.length;
            }
            canvasId = canvases[n - 1];
            canvas = _this.model.canvasesData.add({
              id: canvasId
            });
            canvas.fetch(_this.model);
            return new CanvasMetaView({
              el: "#SGACanvasMeta",
              model: _this.model.canvasesMeta.get(canvasId)
            });
          };
        })(this);
        this.model.ready = function(cb) {
          if (this.sequences.length > 0) {
            return cb();
          } else {
            return this.once("sync", cb);
          }
        };
        this.variables = new SGASharedCanvas.Utils.AudibleProperties({
          seqPage: 0,
          seqMin: 1,
          seqMax: 0
        });
        this.metaTemplate = _.template($('#manifestMeta-tpl').html());
        this.citationTemplate = _.template($('#citation-tpl').html());
        this.canvasesView = new CanvasesView({
          collection: this.model.canvasesData
        });
        this.listenTo(SGASharedCanvas.Data.Manifests, 'page', function(n, paras) {
          var filter;
          this.model.canvasesData.reset();
          this.model.searchResults.reset();
          Backbone.trigger("viewer:searchResults", []);
          if (paras != null) {
            if (paras.mode != null) {
              filter = [];
              switch (paras.mode) {
                case "img":
                  filter.push("Image");
                  break;
                case "std":
                case "rdg":
                case "xml":
                  filter.push("Image", "Text");
                  break;
                case "txt":
                  filter.push("Text");
              }
              this.canvasesView.filter = filter;
              this.model.ready((function(_this) {
                return function() {
                  var callback, curCanvas, d, e, html_url, j, layerAnnos, len, results1, txtdata, xml, xml_url;
                  fetchCanvas(n);
                  if (paras.mode === "rdg") {
                    curCanvas = _this.model.canvasesData.first();
                    layerAnnos = curCanvas.layerAnnos.find(function(m) {
                      return m.get("sc:motivatedBy")["@id"] === "sga:reading";
                    });
                    html_url = layerAnnos.get("resource");
                    if (window.mapping) {
                      d = $.parseHTML(window.mapping[html_url]);
                      results1 = [];
                      for (j = 0, len = d.length; j < len; j++) {
                        e = d[j];
                        if ($(e).is('div')) {
                          $(e).addClass("readingText");
                          results1.push(curCanvas.trigger("addLayer", "Text", e));
                        } else {
                          results1.push(void 0);
                        }
                      }
                      return results1;
                    } else {
                      html_url = html_url.replace(/^http:\/\/.*?(:\d+)?\//, "/");
                      return $.get(html_url, function(data) {
                        var i1, len1, results2;
                        d = $.parseHTML(data);
                        results2 = [];
                        for (i1 = 0, len1 = d.length; i1 < len1; i1++) {
                          e = d[i1];
                          if ($(e).is('div')) {
                            $(e).addClass("readingText");
                            results2.push(curCanvas.trigger("addLayer", "Text", e));
                          } else {
                            results2.push(void 0);
                          }
                        }
                        return results2;
                      });
                    }
                  } else if (paras.mode === "xml") {
                    curCanvas = _this.model.canvasesData.first();
                    layerAnnos = curCanvas.layerAnnos.find(function(m) {
                      return m.get("sc:motivatedBy")["@id"] === "sga:source";
                    });
                    xml_url = layerAnnos.get("resource");
                    if (window.mapping) {
                      txtdata = window.mapping[xml_url];
                      txtdata = txtdata.replace(/\&/g, '&amp;');
                      txtdata = txtdata.replace(/%/g, '&#37;');
                      txtdata = txtdata.replace(/</g, '&lt;');
                      txtdata = txtdata.replace(/>/g, '&gt;');
                      xml = "<pre class='prettyprint'><code class='language-xml'>" + txtdata + "</code></pre>";
                      curCanvas.trigger("addLayer", "Text", xml);
                      return prettyPrint();
                    } else {
                      xml_url = xml_url.replace(/^http:\/\/.*?(:\d+)?\//, "/");
                      callback = function(data) {
                        var serializer, surface;
                        surface = data.getElementsByTagName('surface');
                        serializer = new XMLSerializer();
                        txtdata = serializer.serializeToString(surface[0]);
                        txtdata = txtdata.replace(/\&/g, '&amp;');
                        txtdata = txtdata.replace(/%/g, '&#37;');
                        txtdata = txtdata.replace(/</g, '&lt;');
                        txtdata = txtdata.replace(/>/g, '&gt;');
                        xml = "<pre class='prettyprint'><code class='language-xml'>" + txtdata + "</code></pre>";
                        curCanvas.trigger("addLayer", "Text", xml);
                        return prettyPrint();
                      };
                      return $.get(xml_url, callback, 'xml');
                    }
                  }
                };
              })(this));
            }
            if (paras.query != null) {
              this.model.searchResults.fetch(this.model, paras.filters, paras.query, options.searchService);
              return this.listenToOnce(this.model.searchResults, 'sync', function() {
                var searchResultsPositions;
                searchResultsPositions = [];
                return this.model.ready((function(_this) {
                  return function() {
                    var canvases;
                    canvases = _this.model.sequences.first().get("canvases");
                    _this.model.searchResults.forEach(function(res, i) {
                      var trg;
                      trg = res.get("canvas_id");
                      if (indexOf.call(canvases, trg) >= 0) {
                        return searchResultsPositions.push($.inArray(trg, canvases) + 1);
                      }
                    });
                    fetchCanvas(n);
                    return Backbone.trigger("viewer:searchResults", searchResultsPositions);
                  };
                })(this));
              });
            }
          } else {
            return this.model.ready((function(_this) {
              return function() {
                return fetchCanvas(n);
              };
            })(this));
          }
        });
        this.render();
        return this.model.ready(this.renderMeta);
      };

      ManifestView.prototype.renderMeta = function() {
        var authorParts, citation, dateParts, escaped, initials, j, k, last, len, noColon, parts, ref, ref1, v;
        noColon = {};
        ref = this.model.toJSON();
        for (k in ref) {
          v = ref[k];
          escaped = k.replace('http://www.tei-c.org/ns/1.0/idno', 'teiID');
          escaped = escaped.replace(':', '');
          noColon[escaped] = v;
        }
        $('#SGAManifestMeta').html(this.metaTemplate(noColon));
        citation = {};
        if (noColon["scagentLabel"] != null) {
          authorParts = noColon["scagentLabel"].split(" ");
          last = authorParts[authorParts.length - 1];
          initials = "";
          ref1 = authorParts.slice(0, -1);
          for (j = 0, len = ref1.length; j < len; j++) {
            parts = ref1[j];
            initials += parts.substring(0, 1) + ". ";
          }
          citation["author"] = last + ", " + initials;
        }
        if (noColon["scdateLabel"] != null) {
          dateParts = noColon["scdateLabel"].split(" ");
          citation["year"] = dateParts[dateParts.length - 1];
        }
        if (noColon["dctitle"] != null) {
          citation["title"] = noColon["label"] != null ? noColon["label"] : "";
        }
        return $('#cite-manifest').html(this.citationTemplate(citation));
      };

      ManifestView.prototype.render = function() {
        var limitViewControls, pager, readingModeControls, searchBox, slider, syncVarsFor;
        syncVarsFor = (function(_this) {
          return function(component) {
            return component.listenTo(_this.variables, 'change', function(p) {
              var k, ref, results1, v;
              ref = this.variables.variables;
              results1 = [];
              for (k in ref) {
                v = ref[k];
                results1.push(component.variables.set(k, p[k]));
              }
              return results1;
            });
          };
        })(this);
        pager = new SGASharedCanvas.Component.Pager({
          el: '#sequence-nav',
          vars: this.variables.variables
        });
        syncVarsFor(pager);
        slider = new SGASharedCanvas.Component.Slider({
          el: '#page-location',
          vars: this.variables.variables,
          data: this.model
        });
        syncVarsFor(slider);
        readingModeControls = new SGASharedCanvas.Component.ReadingModeControls({
          el: '#mode-controls',
          vars: this.variables.variables
        });
        syncVarsFor(readingModeControls);
        limitViewControls = new SGASharedCanvas.Component.LimitViewControls({
          el: '#limit-view-controls',
          include: ['hand-library', 'hand-comp'],
          defLimiter: 'hand-mws'
        });
        $('#loading-progress').css({
          position: "absolute",
          "z-index": "10000",
          top: "50%",
          left: "50%"
        });
        searchBox = new SGASharedCanvas.Component.SearchBox({
          el: "#sgaForm"
        });
        return this;
      };

      return ManifestView;

    })(Backbone.View);
    CanvasesView = (function(superClass) {
      extend(CanvasesView, superClass);

      function CanvasesView() {
        return CanvasesView.__super__.constructor.apply(this, arguments);
      }

      CanvasesView.prototype.initialize = function() {
        return this.listenTo(this.collection, 'add', this.addOne);
      };

      CanvasesView.prototype.addOne = function(c) {
        $('#loading-progress').show();
        return this.listenToOnce(c, 'sync', (function(_this) {
          return function() {
            $('#loading-progress').hide();
            return new CanvasView({
              model: c,
              filter: _this.filter
            });
          };
        })(this));
      };

      CanvasesView.prototype.render = function() {
        return this;
      };

      return CanvasesView;

    })(Backbone.View);
    CanvasView = (function(superClass) {
      extend(CanvasView, superClass);

      function CanvasView() {
        return CanvasView.__super__.constructor.apply(this, arguments);
      }

      CanvasView.prototype.initialize = function(options) {
        this.listenTo(this.model, 'remove', this.remove);
        return this.render(options["filter"]);
      };

      CanvasView.prototype.render = function(filter) {
        var area, areas, col, j, len, tpl;
        areas = [];
        tpl = $($('#canvas-tpl').html());
        tpl.find('.sharedcanvas').each(function() {
          var data, ref;
          data = $(this).data();
          data["el"] = this;
          if (filter != null) {
            if (ref = data.types, indexOf.call(filter, ref) >= 0) {
              return areas.push(data);
            }
          } else {
            return areas.push(data);
          }
        });
        this.$el.append(tpl);
        $("#mainSharedCanvas").append(this.$el);
        for (j = 0, len = areas.length; j < len; j++) {
          area = areas[j];
          col = parseInt(12 / areas.length);
          $(area.el).addClass("col-xs-" + col);
          new ViewerAreaView({
            model: this.model,
            el: area.el,
            types: area.types.split(" ")
          });
        }
        return this;
      };

      return CanvasView;

    })(Backbone.View);
    CanvasMetaView = (function(superClass) {
      extend(CanvasMetaView, superClass);

      function CanvasMetaView() {
        return CanvasMetaView.__super__.constructor.apply(this, arguments);
      }

      CanvasMetaView.prototype.initialize = function() {
        this.template = _.template($('#canvasMeta-tpl').html());
        this.citationTemplate = _.template($('#citation_canvas-tpl').html());
        return this.render();
      };

      CanvasMetaView.prototype.render = function() {
        var citation, k, noColon, ref, v;
        noColon = {};
        ref = this.model.toJSON();
        for (k in ref) {
          v = ref[k];
          noColon[k.replace(':', '')] = v;
        }
        noColon.trans = "green";
        if (this.model.get("sga:shelfmarkLabel").includes("Forster")) {
          noColon.trans = "red";
        }
        noColon.meta = "green";
        this.$el.html(this.template(noColon));
        citation = {
          "url": document.URL
        };
        if ((noColon["sgashelfmarkLabel"] != null) && (noColon["sgafolioLabel"] != null)) {
          citation["page"] = noColon["sgashelfmarkLabel"] + ", " + noColon["sgafolioLabel"];
        }
        return $('#cite-canvas').html(this.citationTemplate(citation));
      };

      return CanvasMetaView;

    })(Backbone.View);
    AreaView = (function(superClass) {
      extend(AreaView, superClass);

      function AreaView() {
        return AreaView.__super__.constructor.apply(this, arguments);
      }

      AreaView.prototype.initialize = function(options) {
        var k, ref, results1, v;
        this.variables = new SGASharedCanvas.Utils.AudibleProperties({
          height: 0,
          width: 0,
          x: 0,
          y: 0,
          scale: 0,
          scrollWidth: 0
        });
        if ((options.vars != null) && typeof options.vars === 'object') {
          ref = options.vars;
          results1 = [];
          for (k in ref) {
            v = ref[k];
            results1.push(this.variables.set(k, v));
          }
          return results1;
        }
      };

      return AreaView;

    })(Backbone.View);
    ViewerAreaView = (function(superClass) {
      extend(ViewerAreaView, superClass);

      function ViewerAreaView() {
        return ViewerAreaView.__super__.constructor.apply(this, arguments);
      }

      ViewerAreaView.prototype.initialize = function(options) {
        ViewerAreaView.__super__.initialize.apply(this, arguments);
        this.types = options.types;
        this.listenTo(this.model, 'addLayer', function(area, content) {
          if (indexOf.call(this.types, area) >= 0) {
            return this.addLayer(content);
          }
        });
        return this.render();
      };

      ViewerAreaView.prototype.render = function() {
        var DivHeight, DivWidth, aspectRatio, baseFontSize, canvasHeight, canvasWidth, container, gcd, resizer;
        this.$el.css({
          'overflow': 'hidden'
        });
        container = $("<div></div>");
        this.$el.append(container);
        gcd = function(x, y) {
          var ref;
          while (y !== 0) {
            ref = [y, x % y], x = ref[0], y = ref[1];
          }
          return x;
        };
        canvasWidth = this.model.get("width");
        canvasHeight = this.model.get("height");
        aspectRatio = gcd(canvasWidth, canvasHeight);
        $(container).height(Math.floor(this.$el.width() * (canvasWidth / aspectRatio) / (canvasHeight / aspectRatio)));
        $(container).css({
          'background-color': 'white',
          'z-index': 0
        });
        baseFontSize = 110;
        DivHeight = null;
        DivWidth = Math.floor(this.$el.width() * 20 / 20);
        this.$el.height(Math.floor(this.$el.width() * (canvasWidth / aspectRatio) / (canvasHeight / aspectRatio)));
        resizer = (function(_this) {
          return function() {
            aspectRatio = gcd(canvasWidth, canvasHeight);
            DivWidth = Math.floor(_this.$el.width() * 20 / 20, 10);
            if ((canvasWidth != null) && canvasWidth > 0) {
              _this.variables.set('scale', DivWidth / canvasWidth);
            }
            if ((canvasHeight != null) && canvasHeight > 0) {
              _this.$el.height(DivHeight = Math.floor(canvasHeight * _this.variables.get('scale')));
            }
            return Backbone.trigger("viewer:resize", {
              container: _this.$el,
              scale: _this.variables.get('scale')
            });
          };
        })(this);
        $(window).on("resize", resizer);
        container.css({
          'border': '1px solid grey',
          'background-color': 'white'
        });
        this.listenTo(this.variables, 'change:scale', function(s) {
          if ((canvasWidth != null) && (canvasHeight != null)) {
            DivHeight = Math.floor(canvasHeight * s);
          }
          return container.css({
            'height': DivHeight,
            'width': DivWidth
          });
        });
        canvasWidth = this.model.get("width") != null ? this.model.get("width") : 0;
        canvasHeight = this.model.get("height") != null ? this.model.get("height") : 0;
        resizer();
        this.variables.set('height', canvasHeight);
        this.variables.set('width', canvasWidth);
        if (this.model.get("x") != null) {
          this.variables.set('x', this.model.get("x"));
        }
        if (this.model.get("y") != null) {
          this.variables.set('y', this.model.get("y"));
        }
        this.renderSub(container);
        return this;
      };

      ViewerAreaView.prototype.renderSub = function(container) {
        var addImages, addText, j, len, ref, results1, type;
        addText = (function(_this) {
          return function() {
            return container.append(new ContentsView({
              collection: _this.model.contents,
              el: container,
              vars: _this.variables.variables
            }).render().el);
          };
        })(this);
        addImages = (function(_this) {
          return function() {
            return container.append(new ImagesView({
              collection: _this.model.images,
              el: container,
              vars: _this.variables.variables
            }).render().el);
          };
        })(this);
        ref = this.types;
        results1 = [];
        for (j = 0, len = ref.length; j < len; j++) {
          type = ref[j];
          switch (type) {
            case "All":
              addText();
              results1.push(addImages());
              break;
            case "Image":
              results1.push(addImages());
              break;
            case "Text":
              results1.push(addText());
              break;
            default:
              results1.push(void 0);
          }
        }
        return results1;
      };

      ViewerAreaView.prototype.addLayer = function(content) {
        this.$el.children().html(content);
        return this.$el.children().css("overflow", "auto");
      };

      return ViewerAreaView;

    })(AreaView);
    ContentsView = (function(superClass) {
      extend(ContentsView, superClass);

      function ContentsView() {
        return ContentsView.__super__.constructor.apply(this, arguments);
      }

      ContentsView.prototype.initialize = function(options) {
        this.variables = options.vars;
        return this.listenTo(this.collection, 'add', this.addOne);
      };

      ContentsView.prototype.addOne = function(model) {
        return this.$el.append(new ContentView({
          model: model,
          vars: this.variables
        }).render().el);
      };

      ContentsView.prototype.render = function() {
        return this;
      };

      return ContentsView;

    })(Backbone.View);
    ContentView = (function(superClass) {
      extend(ContentView, superClass);

      function ContentView() {
        return ContentView.__super__.constructor.apply(this, arguments);
      }

      ContentView.prototype.render = function() {
        var height, rootEl, setScale, width, x, y;
        this.$el.css({
          overflow: 'auto',
          position: 'absolute'
        });
        rootEl = $("<div></div>");
        $(rootEl).addClass("text-content");
        $(rootEl).attr("id", this.model.get("@id"));
        $(rootEl).css({
          "white-space": "nowrap"
        });
        this.$el.append(rootEl);
        x = this.model.get("x") != null ? this.model.get("x") : 0;
        y = this.model.get("y") != null ? this.model.get("y") : 0;
        width = this.model.get("width") != null ? this.model.get("width") : this.variables.get("width") - x;
        height = this.model.get("height") != null ? this.model.get("height") : this.variables.get("height") - y;
        this.$el.css({
          left: Math.floor(16 + x * this.variables.get('scale')) + "px",
          top: Math.floor(y * this.variables.get('scale')) + "px",
          width: Math.floor(width * this.variables.get('scale')) + "px",
          height: Math.floor(height * this.variables.get('scale')) + "px"
        });
        setScale = (function(_this) {
          return function(s) {
            _this.$el.css({
              left: Math.floor(16 + x * s) + "px",
              top: Math.floor(y * s) + "px",
              width: Math.floor(width * s) + "px",
              height: Math.floor(height * s) + "px"
            });
            if (_this.$el.perfectScrollbar != null) {
              return _this.$el.perfectScrollbar('update');
            }
          };
        })(this);
        Backbone.on('viewer:resize', (function(_this) {
          return function(options) {
            return setScale(options.scale);
          };
        })(this));
        if (this.$el.perfectScrollbar != null) {
          this.$el.css({
            overflow: 'hidden'
          });
          this.$el.perfectScrollbar({
            suppressScrollX: true,
            includePadding: true,
            scrollYMarginOffset: 10
          });
        }
        new TextAnnotationsView({
          collection: this.model.textItems,
          el: rootEl,
          vars: this.variables.variables
        });
        return this;
      };

      return ContentView;

    })(AreaView);
    TextAnnotationsView = (function(superClass) {
      extend(TextAnnotationsView, superClass);

      function TextAnnotationsView() {
        return TextAnnotationsView.__super__.constructor.apply(this, arguments);
      }

      TextAnnotationsView.prototype.initialize = function(options) {
        var adjustFontSize;
        TextAnnotationsView.__super__.initialize.apply(this, arguments);
        this.listenTo(this.collection, 'add', this.addOne);
        this.currentLine = 0;
        this.currentLineEl = $("<div></div>");
        this.$el.append(this.currentLineEl);
        this.lastRendering = null;
        this.lastRenderingNonEmpty = null;
        this.variables.on('change:width', (function(_this) {
          return function(w) {
            return _this.$el.attr('width', w / 10);
          };
        })(this));
        adjustFontSize = (function(_this) {
          return function() {
            var adj, fs, newfs;
            fs = parseInt(_this.$el.css('font-size'));
            newfs = fs - 1;
            _this.$el.css('font-size', newfs + 'px');
            _this.variables.set('fontSize', (fs - 1) / _this.variables.get("scale"));
            adj = newfs * 2.0;
            return _this.$el.css('line-height', adj + 'px');
          };
        })(this);
        this.variables.on('change:scrollWidth', (function(_this) {
          return function(sw) {
            var results1;
            if (_this.$el.innerWidth() !== 0) {
              results1 = [];
              while (_this.$el.innerWidth() < _this.el.scrollWidth) {
                results1.push(adjustFontSize());
              }
              return results1;
            }
          };
        })(this));
        return Backbone.on('viewer:resize', (function(_this) {
          return function(options) {
            if (_this.variables.get('fontSize') != null) {
              return _this.$el.css('font-size', _this.variables.get('fontSize') * options.scale);
            }
          };
        })(this));
      };

      TextAnnotationsView.prototype.addOne = function(model) {
        var _getTextWidth, a, additionLine, annoEl, arr, br, ext, indent, j, l, lines, longest_line, next1, padding, prev1, ref, ref1, ref2, ref3, ref4, setPosition, textAnnoView, type, w;
        setPosition = (function(_this) {
          return function(textAnnoView, annoEl) {
            var accOffset, availableSpace, middle, myMiddle, myOffset, neededSpace, ourLeft, ourWidth, prevOffset, prevSibling, prevSiblings, ref, rendering_width, setScale, spacing, usedSpace;
            ourWidth = _this.variables.get("width") / 10;
            ourLeft = annoEl.offset().left;
            rendering_width = annoEl.width() / _this.variables.get("scale");
            annoEl.css({
              width: Math.ceil(rendering_width * _this.variables.get("scale")) + "px"
            });
            if (((ref = _this.lastRenderingNonEmpty) != null ? ref.get(0) : void 0) != null) {
              myOffset = annoEl.offset();
              if (((_this.lastRenderingNonEmpty.data("place") != null) && (annoEl.data("place") != null)) && _this.lastRenderingNonEmpty.data("place") === "above" && annoEl.data("place") === "below") {
                middle = myOffset.left + annoEl.outerWidth(false) / 2;
              } else if (_this.lastRenderingNonEmpty.hasClass('sgaDeletionAnnotation')) {
                middle = _this.lastRenderingNonEmpty.offset().left + (_this.lastRenderingNonEmpty.outerWidth(false) / 2);
              } else if ((_this.lastRenderingNonEmpty.data("line") != null) && _this.lastRenderingNonEmpty.data("line") < _this.currentLine) {
                middle = myOffset.left;
              } else {
                middle = _this.lastRenderingNonEmpty.offset().left + (_this.lastRenderingNonEmpty.outerWidth(false));
              }
              myMiddle = myOffset.left + annoEl.outerWidth(false) / 2;
              neededSpace = middle - myMiddle;
              prevSibling = annoEl.prev();
              accOffset = 0;
              spacing = 0;
              if ((prevSibling != null) && prevSibling.size() > 0) {
                prevOffset = prevSibling.offset();
                accOffset = prevSibling.offset().left + prevSibling.outerWidth(false) - ourLeft;
                spacing = (prevOffset.left + prevSibling.outerWidth(false)) - myOffset.left;
                spacing = parseInt(prevSibling.css('left'), 10) || 0;
                if (spacing > neededSpace) {
                  neededSpace = spacing;
                }
              }
              if (neededSpace >= 0) {
                if (neededSpace + (myOffset.left - ourLeft) + accOffset + annoEl.outerWidth(false) > ourWidth) {
                  neededSpace = ourWidth - (myOffset.left - ourLeft) - accOffset - annoEl.outerWidth(false);
                }
              }
              if (neededSpace < 0) {
                if ((prevSibling == null) || prevSibling.size() <= 0) {
                  neededSpace = 0;
                } else {
                  neededSpace = -neededSpace;
                  prevSiblings = annoEl.prevAll();
                  availableSpace = 0;
                  prevSiblings.each(function(i, x) {
                    return availableSpace += parseInt($(x).css('left'), 10) || 0;
                  });
                  if (prevSibling.size() > 0) {
                    availableSpace -= prevSibling.offset().left - ourLeft + prevSibling.outerWidth(false);
                  }
                  if (availableSpace > neededSpace) {
                    usedSpace = 0;
                    prevSiblings.each(function(i, s) {
                      var oldLeft, useWidth;
                      oldLeft = parseInt($(s).css('left'), 10) || 0;
                      if (availableSpace > 0) {
                        useWidth = Math.floor(oldLeft * (neededSpace - usedSpace) / availableSpace);
                        $(s).css('left', (oldLeft - useWidth - usedSpace) + "px");
                        usedSpace += useWidth;
                        return availableSpace -= oldLeft;
                      }
                    });
                    neededSpace = -neededSpace;
                  } else {
                    prevSiblings.each(function(i, s) {
                      return $(s).css('left', "0px");
                    });
                    neededSpace = 0;
                  }
                }
              }
              if (neededSpace > 0) {
                if (prevSibling.size() > 0) {
                  if (neededSpace < parseInt(prevSibling.css('left'), 10)) {
                    neededSpace = parseInt(prevSibling.css('left'), 10);
                  }
                }
                annoEl.css({
                  'position': 'relative',
                  'left': neededSpace + "px"
                });
              }
              textAnnoView.variables.set("left", neededSpace / _this.variables.get("scale"));
              textAnnoView.variables.set("width", annoEl.width() / _this.variables.get("scale"));
              setScale = function(s) {
                return annoEl.css({
                  'left': Math.floor(textAnnoView.variables.get("left") * s) + "px",
                  'width': Math.ceil(textAnnoView.variables.get("width") * s) + "px"
                });
              };
              return Backbone.on('viewer:resize', function(options) {
                return setScale(options.scale);
              });
            }
          };
        })(this);
        type = model.get("type");
        _getTextWidth = function(container) {
          var font_size, o, text, w_px;
          container = $(container);
          o = container.clone().css({
            'position': 'absolute',
            'float': 'left',
            'white-space': 'nowrap',
            'visibility': 'hidden'
          }).appendTo($('body'));
          text = $.trim(o.text().replace(/\s+/g, ' '));
          o.text(text);
          w_px = o.width();
          font_size = o.css('font-size');
          font_size = parseInt(font_size.substring(0, font_size.length - 2));
          o.remove();
          return w_px / font_size;
        };
        switch (false) {
          case indexOf.call(type, "sgaAdditionAnnotation") < 0:
            if (/vertical-align: super;/.test(model.get("css"))) {
              additionLine = !this.currentLineEl.prev().hasClass('above-line') ? $("<div class='above-line'></div>") : this.currentLineEl.prev();
              textAnnoView = new TextAnnoView({
                model: model
              });
              annoEl = $((ref = textAnnoView.render()) != null ? ref.el : void 0);
              annoEl.data("place", "above");
              annoEl.data("line", this.currentLine);
              additionLine.append(annoEl).insertBefore(this.currentLineEl);
              if (annoEl.get(0) != null) {
                setPosition(textAnnoView, annoEl);
                this.lastRendering = annoEl;
                if (textAnnoView.model.attributes.text.replace(/\s+/, '') !== '') {
                  this.lastRenderingNonEmpty = annoEl;
                }
              }
            } else if (/vertical-align: sub;/.test(model.get("css"))) {
              additionLine = null;
              if (!this.currentLineEl.next().hasClass('below-line')) {
                additionLine = $("<div class='below-line'></div>");
                indent = this.currentLineEl.data('indent');
                if (indent != null) {
                  additionLine.css({
                    'padding-left': indent
                  });
                }
              } else {
                additionLine = this.currentLineEl.next();
              }
              textAnnoView = new TextAnnoView({
                model: model
              });
              annoEl = $((ref1 = textAnnoView.render()) != null ? ref1.el : void 0);
              annoEl.data("place", "below");
              annoEl.data("line", this.currentLine);
              additionLine.append(annoEl).insertAfter(this.currentLineEl);
              if (annoEl.get(0) != null) {
                setPosition(textAnnoView, annoEl);
                this.lastRendering = annoEl;
                if (textAnnoView.model.attributes.text.replace(/\s+/, '') !== '') {
                  this.lastRenderingNonEmpty = annoEl;
                }
              }
            } else {
              textAnnoView = new TextAnnoView({
                model: model
              });
              annoEl = $((ref2 = textAnnoView.render()) != null ? ref2.el : void 0);
              annoEl.data("line", this.currentLine);
              this.lastRendering = annoEl;
              if (textAnnoView.model.attributes.text.replace(/\s+/, '') !== '') {
                this.lastRenderingNonEmpty = annoEl;
              }
              this.currentLineEl.append(annoEl);
            }
            break;
          case !(indexOf.call(type, "Text") >= 0 || indexOf.call(type, "sgaLineAnnotation") >= 0 || indexOf.call(type, "sgaDeletionAnnotation") >= 0 || indexOf.call(type, "sgaSearchAnnotation") >= 0):
            textAnnoView = new TextAnnoView({
              model: model
            });
            annoEl = $((ref3 = textAnnoView.render()) != null ? ref3.el : void 0);
            annoEl.data("line", this.currentLine);
            this.currentLineEl.append(annoEl);
            if (annoEl.get(0) != null) {
              this.lastRendering = annoEl;
              if (textAnnoView.model.attributes.text.replace(/\s+/, '') !== '') {
                this.lastRenderingNonEmpty = annoEl;
              }
            }
            break;
          case indexOf.call(type, 'EmptyLine') < 0:
            ext = parseInt(model.get('ext'));
            for (br = j = 1, ref4 = ext + 1; 1 <= ref4 ? j <= ref4 : j >= ref4; br = 1 <= ref4 ? ++j : --j) {
              l = this.currentLineEl.prev('div:not(.above-line)');
              if (l.get(0) != null) {
                l.append("<br/>");
              } else {
                this.$el.prepend("<br/>");
              }
            }
            this.$el.append(this.currentLineEl);
            break;
          case indexOf.call(type, "LineBreak") < 0:
            padding = 0;
            prev1 = this.currentLineEl.prev();
            next1 = this.currentLineEl.next();
            if (model.get("align") != null) {
              this.currentLineEl.data({
                'align': model.get("align")
              });
              if (next1.hasClass('below-line')) {
                next1.data({
                  'align_addition': 'with_above'
                });
              }
              if (prev1.hasClass('above-line')) {
                prev1.data({
                  'align_addition': 'with_below'
                });
              }
            }
            if (model.get("indent") != null) {
              this.currentLineEl.data({
                'indent': model.get("indent")
              });
              if (next1.hasClass('below-line')) {
                next1.data({
                  'align_addition': 'with_above'
                });
              }
              if (prev1.hasClass('above-line')) {
                prev1.data({
                  'align_addition': 'with_below'
                });
              }
            }
            this.currentLineEl = $("<div></div>").data({
              "indent": padding
            });
            this.$el.append(this.currentLineEl);
            this.currentLine += 1;
        }
        if (this.variables.get('scrollWidth') !== this.el.scrollWidth) {
          this.variables.set('scrollWidth', this.el.scrollWidth);
        }
        lines = this.$el.find('.sgaLineAnnotation');
        arr = lines.map(function() {
          return $(this).text().length;
        }).get();
        longest_line = lines[arr.indexOf(Math.max.apply(Math, arr))];
        if (longest_line != null) {
          w = _getTextWidth(longest_line);
          a = this.$el.find('div').filter(function() {
            return $(this).data('indent') || $(this).data('align');
          }).each(function() {
            var al, curTextLength, ind;
            l = $(this);
            al = l.data('align');
            ind = l.data('indent');
            if (al != null) {
              curTextLength = _getTextWidth(l);
              if (al === "right") {
                if (lines.length === 1) {
                  l.css({
                    'text-align': 'right',
                    'padding-right': '4em'
                  });
                } else {
                  l.css({
                    'text-align': 'left',
                    'padding-right': '0em'
                  });
                }
                padding = (w - curTextLength) + "em";
              } else if (al === "center") {
                padding = ((w / 2) - (curTextLength / 2)) + "em";
              }
              return l.css({
                'padding-left': padding
              });
            } else if (ind != null) {
              return l.css({
                'padding-left': (w * ind) / 10 + "em"
              });
            }
          });
          a = this.$el.find('div').filter(function() {
            return $(this).data('align_addition');
          }).each(function() {
            var where;
            l = $(this);
            where = l.data('align_addition');
            if (where === 'with_below') {
              padding = l.next().css('padding-left');
              return l.css({
                'padding-left': padding
              });
            } else {
              padding = l.prev().css('padding-left');
              return l.css({
                'padding-left': padding
              });
            }
          });
        }
        if (this.$el.parent().perfectScrollbar != null) {
          return this.$el.parent().perfectScrollbar('update');
        }
      };

      return TextAnnotationsView;

    })(AreaView);
    TextAnnoView = (function(superClass) {
      extend(TextAnnoView, superClass);

      function TextAnnoView() {
        return TextAnnoView.__super__.constructor.apply(this, arguments);
      }

      TextAnnoView.prototype.tagName = "span";

      TextAnnoView.prototype.render = function() {
        var content, cur_style, icss;
        this.$el.css({
          'display': 'inline'
        });
        this.$el.text(this.model.get("text"));
        this.$el.addClass(this.model.get("type").join(" "));
        icss = this.model.get("css");
        if ((icss != null) && !/^\s*$/.test(icss)) {
          cur_style = this.$el.attr("style");
          this.$el.attr("style", cur_style + " " + icss);
        }
        content = this.model.get("text").replace(/\s+/g, " ");
        return this;
      };

      return TextAnnoView;

    })(AreaView);
    ImagesView = (function(superClass) {
      extend(ImagesView, superClass);

      function ImagesView() {
        return ImagesView.__super__.constructor.apply(this, arguments);
      }

      ImagesView.prototype.initialize = function(options) {
        this.variables = options.vars;
        return this.listenTo(this.collection, 'add', this.addOne);
      };

      ImagesView.prototype.addOne = function(model) {
        if (model.get("format") === "image/jp2" && (model.get("service") != null)) {
          return new ImageDjatokaView({
            el: this.$el,
            model: model,
            vars: this.variables
          }).render();
        } else {
          this.$el.append(new ImageView({
            model: model,
            vars: this.variables
          }).render().el);
          return this.$el.css({
            position: 'relative'
          });
        }
      };

      ImagesView.prototype.render = function() {
        return this;
      };

      return ImagesView;

    })(Backbone.View);
    ImageView = (function(superClass) {
      extend(ImageView, superClass);

      function ImageView() {
        return ImageView.__super__.constructor.apply(this, arguments);
      }

      ImageView.prototype.tagName = 'img';

      ImageView.prototype.render = function() {
        var height, s, setScale, width, x, y;
        x = this.model.get("x") != null ? this.model.get("x") : this.variables.get("x");
        y = this.model.get("y") != null ? this.model.get("y") : this.variables.get("y");
        width = this.model.get("width") != null ? this.model.get("width") : this.variables.get("width") - x;
        height = this.model.get("height") != null ? this.model.get("height") : this.variables.get("height") - x;
        s = this.variables.get("scale");
        this.$el.attr({
          height: Math.floor(height * s),
          width: Math.floor(width * s),
          src: this.model.get("@id"),
          border: 'none'
        });
        this.$el.css({
          position: 'absolute',
          top: Math.floor(y * s),
          left: Math.floor(x * s)
        });
        setScale = (function(_this) {
          return function(s) {
            _this.$el.attr({
              height: Math.floor(height * s),
              width: Math.floor(width * s)
            });
            return _this.$el.css({
              top: Math.floor(y * s),
              left: Math.floor(x * s)
            });
          };
        })(this);
        Backbone.on('viewer:resize', (function(_this) {
          return function(options) {
            return setScale(options.scale);
          };
        })(this));
        return this;
      };

      return ImageView;

    })(AreaView);
    return ImageDjatokaView = (function(superClass) {
      extend(ImageDjatokaView, superClass);

      function ImageDjatokaView() {
        return ImageDjatokaView.__super__.constructor.apply(this, arguments);
      }

      ImageDjatokaView.prototype.initialize = function(options) {
        var imageControls, syncVarsFor;
        ImageDjatokaView.__super__.initialize.apply(this, arguments);
        syncVarsFor = (function(_this) {
          return function(component) {
            return component.listenTo(_this.variables, 'change', function(p) {
              var k, ref, results1, v;
              ref = this.variables.variables;
              results1 = [];
              for (k in ref) {
                v = ref[k];
                results1.push(component.variables.set(k, p[k]));
              }
              return results1;
            });
          };
        })(this);
        imageControls = new SGASharedCanvas.Component.ImageControls({
          el: '#img-controls'
        });
        this.listenTo(imageControls.variables, 'change:zoom', function(z) {
          if (this.dragon != null) {
            switch (z) {
              case 0:
                return this.dragon.viewport.goHome();
              case 1:
                return this.zoomIn();
              case -1:
                return this.zoomOut();
              default:
                return this.dragon.viewport.goHome();
            }
          }
        });
        return this.listenTo(imageControls.variables, 'change:rotation', function(r) {
          if (this.dragon != null) {
            switch (r) {
              case 1:
                return this.rotateRight();
              case -1:
                return this.rotateLeft();
              default:
                return this.dragon.viewport.goHome();
            }
          }
        });
      };

      ImageDjatokaView.prototype.zoomIn = function() {
        var max, z;
        if (this.dragon != null) {
          max = this.dragon.viewport.getMaxZoom();
          z = this.dragon.viewport.getZoom();
          if (max > z) {
            return this.dragon.viewport.zoomTo(z + 1);
          }
        }
      };

      ImageDjatokaView.prototype.zoomOut = function() {
        var min, z;
        if (this.dragon != null) {
          min = this.dragon.viewport.getMinZoom();
          z = this.dragon.viewport.getZoom();
          if (min < z) {
            return this.dragon.viewport.zoomTo(z - 1);
          }
        }
      };

      ImageDjatokaView.prototype.rotateRight = function() {
        var newr, r;
        if (this.dragon != null) {
          r = this.dragon.viewport.getRotation();
          newr = r + 90;
          if (newr > 360) {
            return this.dragon.viewport.setRotation(0);
          } else {
            return this.dragon.viewport.setRotation(newr);
          }
        }
      };

      ImageDjatokaView.prototype.rotateLeft = function() {
        var newr, r;
        if (this.dragon != null) {
          r = this.dragon.viewport.getRotation();
          newr = r - 90;
          this.dragon.viewport.setRotation(newr);
          if (newr < -360) {
            return this.dragon.viewport.setRotation(0);
          } else {
            return this.dragon.viewport.setRotation(newr);
          }
        }
      };

      ImageDjatokaView.prototype.render = function() {
        var divScale, full_url, height, id, img, innerContainer, scaleFactors, service, settings, static_fallback_full_url, static_fallback_service, width;
        if ((typeof OpenSeadragon !== "undefined" && OpenSeadragon !== null) && (OpenSeadragon.IIIFTileSource != null)) {
          width = this.model.get('width') != null ? this.model.get('width') : void 0;
          height = this.model.get('height') != null ? this.model.get('height') : void 0;
          divScale = this.variables.get("scale");
          innerContainer = $("<div id='osd-container'></div>");
          innerContainer.css({
            "width": width * divScale,
            "height": height * divScale
          });
          this.$el.html(innerContainer);
          service = this.model.get("service");
          static_fallback_service = "https://s3.amazonaws.com/sga-tiles/";
          id = this.model.get("@id");
          img = id.replace(/^.*?\/([^\/]+.jp2)$/, "$1");
          full_url = service + img;
          static_fallback_full_url = static_fallback_service + id.replace(/^.*images\/(.*?)\.jp2/, "$1");
          scaleFactors = [1, 2, 4, 8, 16];
          if (window.mapping) {
            return this.dragon = OpenSeadragon({
              id: 'osd-container',
              tileSources: {
                type: 'image',
                url: window.mapping[id],
                crossOriginPolicy: 'Anonymous'
              },
              animationTime: 0,
              minZoomLevel: 1,
              defaultZoomLevel: 1,
              showNavigationControl: false
            });
          } else if (full_url.startsWith('./')) {
            return this.dragon = OpenSeadragon({
              id: 'osd-container',
              tileSources: {
                type: 'image',
                url: full_url,
                crossOriginPolicy: 'Anonymous'
              },
              animationTime: 0,
              minZoomLevel: 1,
              defaultZoomLevel: 1,
              showNavigationControl: false
            });
          } else {
            if (!SGASharedCanvas.imageTrouble) {
              return $.ajax({
                url: full_url,
                type: 'GET',
                complete: function(xhr) {
                  var settings;
                  if (xhr.status === 200) {
                    scaleFactors.push(32);
                    if (img.includes('ms_abinger_c')) {
                      service += "frankenstein/";
                    } else {
                      service += "other/";
                    }
                  } else {
                    SGASharedCanvas.imageTrouble = true;
                    full_url = static_fallback_full_url;
                  }
                  settings = {
                    "@context": "http://iiif.io/api/image/2/context.json",
                    "@id": full_url,
                    "height": height,
                    "width": width,
                    "profile": "http://iiif.io/api/image/2/level1.json",
                    "protocol": "http://iiif.io/api/image",
                    "tiles": [
                      {
                        "scaleFactors": scaleFactors,
                        "width": 256
                      }
                    ]
                  };
                  return this.dragon = OpenSeadragon({
                    id: 'osd-container',
                    minZoomLevel: 1,
                    defaultZoomLevel: 1,
                    tileSources: [settings],
                    animationTime: 0,
                    showNavigationControl: false
                  });
                }
              });
            } else {
              settings = {
                "@context": "http://iiif.io/api/image/2/context.json",
                "@id": static_fallback_full_url,
                "height": height,
                "width": width,
                "profile": "http://iiif.io/api/image/2/level1.json",
                "protocol": "http://iiif.io/api/image",
                "tiles": [
                  {
                    "scaleFactors": scaleFactors,
                    "width": 256
                  }
                ]
              };
              return this.dragon = OpenSeadragon({
                id: 'osd-container',
                minZoomLevel: 1,
                defaultZoomLevel: 1,
                tileSources: [settings],
                animationTime: 0,
                showNavigationControl: false
              });
            }
          }
        } else {
          throw new Error("Could not load OpenSeadragon to render JP2 image.");
        }
      };

      return ImageDjatokaView;

    })(AreaView);
  })();

  SGASharedCanvas.Router = SGASharedCanvas.Router || {};

  (function() {
    var Main;
    Main = (function(superClass) {
      extend(Main, superClass);

      function Main() {
        return Main.__super__.constructor.apply(this, arguments);
      }

      Main.prototype.routes = {
        "": "pageOne",
        "p:n": "page",
        "p:n/mode/:mode": "mode",
        "p:n/search/f\::filters|q\::query": "search"
      };

      Main.prototype.pageOne = function() {
        var loc;
        loc = Backbone.history.location.hash + "#/p1";
        return Backbone.history.navigate(loc, {
          trigger: true
        });
      };

      Main.prototype.page = function(n) {
        var manifests;
        if ((n == null) || n < 1) {
          n = 1;
        }
        manifests = SGASharedCanvas.Data.Manifests;
        return manifests.trigger("page", n);
      };

      Main.prototype.mode = function(n, mode) {
        var manifests;
        if ((n == null) || n < 1) {
          n = 1;
        }
        manifests = SGASharedCanvas.Data.Manifests;
        return manifests.trigger("page", n, {
          mode: mode
        });
      };

      Main.prototype.search = function(n, filters, query) {
        var manifests;
        if ((n == null) || n < 1) {
          n = 1;
        }
        manifests = SGASharedCanvas.Data.Manifests;
        return manifests.trigger("page", n, {
          filters: filters,
          query: query
        });
      };

      return Main;

    })(Backbone.Router);
    return SGASharedCanvas.Router.Main = new Main;
  })();

}).call(this);
